How did viewing a diff between two versions of a file help you see the bug that was introduced?

It displayed the exact differences in two files
It displayed where the differences occured
It saved me time and effort




How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

History allowes one to see progressions
Track changes made over time
Sharing of versions
Testing different things with different versions
Comparing different things with different versions




What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Cons:
Sometimes you can forget to commit crucial changes
The changes become to large for a commit
Changes can be lost if not manually committed

Pros:
Too many versions saved to keep track of
Versions saved may not make logical sense
The purpose of version control upheld




Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Often coding files are connected to each other. So one file affets the other. Git is a good option for that. 
Multiple Google docs can be opened at different locations, so tracking each file separately allows google docs to save work?



How can you use the commands git log and git diff to view the history of files?

Git log
Git log can be easily used to view all the commits 

Git diff
Git diff can be used to find the differences between different commits 



How might using version control make you more confident to make changes that could break something?

Since versoin control always saves previous commits, making changes becomes consequenceless since old code is perfectly preserved.



Now that you have your workspace set up, what do you want to try using Git for?

To save versoins of my code
